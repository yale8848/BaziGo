package Lunar

import (
	. "github.com/yale8848/BaziGo/Common"
)

// { * 自公元前 850 年开始的农历闰月信息 -849~2100，移植自中国日历类}
// var SCnLeapMonth string = "0c0080050010a0070030c0080050010a0070030c0080050020a0070030c0080050020a" + "0070030c0090050020a0070030c0090050020a0060030c0060030c00900600c0c0060c" + "00c00c00c0c000600c0c0006090303030006000c00c060c0006c00000c0c0c00600030" + "30006c00009009c0090c00c009000300030906030030c0c00060c00090c0060600c003" + "0060c00c003006009060030c0060060c0090900c00090c0090c00c0060300060600030" + "30c0c00030c0060030c0090060030c0090300c0080050020a0060030c0080050020b00" + "70030c0090050010a0070030b0090060020a0070040c0080050020a0060030c0080050" + "020b0070030c0090050010a0070030b0090060020a0070040c0080050020a0060030c0" + "080050020b0070030c0090050000c00900909009009090090090090900900909009009" + "0090900900909009009009090090090900900900909009009090090090900900900909" + "00900909009009009090090090900900900909009009090060030c0090050010a00700" + "30b008005001090070040c0080050020a0060030c0090040010a0060030c0090050010" + "a0070030b0080050010a008005001090050020a0060030c0080040010a0060030c0090" + "050010a0070030b0080050010a0070030b008005001090070040c0080050020a006003" + "0c0080040010a0060030c0090050010a0070030b008005001090070040c0080050020a" + "0060030c0080040010a0060030c0090050010a0060030c0090050010a0070030b00800" + "5001090070040c0080050020a0060030c0080040010a0070030b0080050010a0070040" + "c0080050020a0060030c0080040010a0070030c0090050010a0070030b0080050020a0" + "060030c0080040010a0060030c0090050050020a0060030c0090050010b0070030c009" + "0050010a0070040c0080040020a0060030c0080050020a0060030c0090050010a00700" + "30b0080040020a0060040c0090050020b0070030c00a0050010a0070030b0090050020" + "a0070030c0080040020a0060030c0090050010a0070030c0090050030b007005001090" + "050020a007004001090060020c0070050c0090060030b0080040020a0060030b008004" + "0010a0060030b0080050010a0050040c0080050010a0060030c0080050010b0070030c" + "007005001090070030b0070040020a0060030c0080040020a0070030b0090050010a00" + "60040c0080050020a0060040c0080050010b0070030c007005001090070030c0080050" + "020a0070030c0090050020a0070030c0090050020a0060040c0090050020a0060040c0" + "090050010b0070030c0080050030b007004001090060020c008004002090060020a008" + "004001090050030b0080040020a0060040b0080040c00a0060020b0070050010900600" + "30b0070050020a0060020c008004002090070030c008005002090070040c0080040020" + "a0060040b0090050010a0060030b0080050020a0060040c0080050010b007003001080" + "05001090070030c0080050020a007003001090050030a0070030b0090050020a006004" + "0c0090050030b0070040c0090050010c0070040c0080060020b00700400a090060020b" + "007003002090060020a005004001090050030b007004001090050040c0080040c00a00" + "60020c007005001090060030b0070050020a0060020c008004002090060030b0080040" + "02090060030b0080040020a0060040b0080040010b0060030b0070050010a006004002" + "0700500308006004003070050030700600400307005003080060040030700500409006" + "0040030700500409006005002070050030a00600500307005004002060040020600500" + "30020600400307005004090060040030700500408007005003080050040a0060050030" + "7005004002060050030800500400206005002070050040020600500307006004002070" + "050030800600400307005004080060040a006005003080050040020700500409006004" + "002060050030b006005002070050030800600400307005004080060040030700500408" + "0060040020"
const START_YEAR = 1800

// 从公元1800年 到 公元2300年
var LEAP_MONTH_LIST = [500]int{
	38570, 3434, 1396, 21174, 4718, 51758, 6700, 7318, 44370, 6994, // 1800 - 1809
	2922, 25965, 1372, 5212, 23085, 6442, 55957, 5796, 5842, 35546, // 1810 - 1819
	2746, 1210, 29787, 5206, 62763, 5418, 5780, 46762, 5546, 2742, // 1820 - 1829
	33975, 1198, 76375, 2646, 3370, 52629, 2900, 5482, 35437, 2396, // 1830 - 1839
	5294, 27221, 6740, 64810, 6826, 2900, 46426, 4794, 2396, 38059, // 1840 - 1849
	5274, 72267, 5714, 5802, 60117, 1460, 4794, 43351, 2358, 5270, // 1850 - 1859
	30283, 3410, 71081, 3434, 1388, 45750, 4718, 2350, 35990, 7316, // 1860 - 1869
	89418, 6994, 2906, 50541, 1372, 4700, 47405, 6442, 6804, 31562, // 1870 - 1879
	5842, 60122, 2742, 1210, 45659, 4694, 5418, 39573, 5780, 5802, // 1880 - 1889
	19157, 2742, 50359, 1198, 2646, 46378, 7466, 3412, 30122, 5482, // 1890 - 1899
	67949, 2396, 5294, 43597, 6732, 6954, 36181, 2772, 4954, 18781, // 1900 - 1909
	2396, 54427, 5274, 6730, 47781, 5800, 6868, 21210, 4790, 59703, // 1910 - 1919
	2350, 5270, 46667, 3402, 3496, 38325, 1388, 4782, 18735, 2350, // 1920 - 1929
	52374, 6804, 7498, 44457, 2906, 1388, 29294, 4700, 63789, 6442, // 1930 - 1939
	6804, 56138, 5802, 2772, 38235, 1210, 4698, 22827, 5418, 63125, // 1940 - 1949
	3476, 5802, 43701, 2484, 5302, 27223, 2646, 70954, 7466, 3412, // 1950 - 1959
	54698, 5482, 2412, 38062, 5294, 2636, 32038, 6954, 60245, 2772, // 1960 - 1969
	4826, 43357, 2394, 5274, 39501, 6730, 72357, 5800, 5844, 53978, // 1970 - 1979
	4790, 2358, 38039, 5270, 87627, 3402, 3496, 54708, 5484, 4782, // 1980 - 1989
	43311, 2350, 3222, 27978, 7498, 68965, 2904, 5484, 45677, 4700, // 1990 - 1999
	6444, 39573, 6804, 6986, 19285, 2772, 62811, 1210, 4698, 47403, // 2000 - 2009
	5418, 5780, 38570, 5546, 76469, 2420, 5302, 51799, 2646, 5414, // 2010 - 2019
	36501, 3412, 5546, 18869, 2412, 54446, 5276, 6732, 48422, 6822, // 2020 - 2029
	2900, 28010, 4826, 92509, 2394, 5274, 55883, 6730, 6820, 47956, // 2030 - 2039
	5812, 2778, 18779, 2358, 62615, 5270, 5450, 46757, 3492, 5556, // 2040 - 2049
	27318, 4718, 67887, 2350, 3222, 52554, 7498, 3412, 38252, 5468, // 2050 - 2059
	4700, 31022, 6444, 64149, 6804, 6986, 43861, 2772, 5338, 35421, // 2060 - 2069
	2650, 70955, 5418, 5780, 54954, 5546, 2740, 38074, 5302, 2646, // 2070 - 2079
	29991, 3366, 61011, 3412, 5546, 43445, 2412, 5294, 35406, 6700, // 2080 - 2089
	72998, 6820, 6996, 52586, 2778, 2396, 38045, 5210, 6698, 23333, // 2090 - 2099
	6820, 64338, 5812, 2746, 43355, 2358, 5270, 39499, 5450, 79525, // 2100 - 2109
	3492, 5548, 51894, 4718, 2350, 35991, 2710, 3402, 28069, 3412, // 2110 - 2119
	62826, 5466, 2652, 47406, 5420, 6804, 40266, 6954, 93013, 2772, // 2120 - 2129
	5338, 51805, 2650, 5402, 47765, 5716, 5802, 19157, 2740, 62650, // 2130 - 2139
	5302, 2646, 46359, 3350, 3666, 38570, 3434, 91573, 2412, 5294, // 2140 - 2149
	51758, 6700, 7446, 44370, 6994, 2922, 25965, 1372, 62557, 5210, // 2150 - 2159
	6698, 55957, 5796, 6866, 35674, 2742, 83291, 2230, 5206, 54571, // 2160 - 2169
	5418, 5780, 46762, 5546, 2742, 25783, 2222, 60503, 2646, 3370, // 2170 - 2179
	52629, 2900, 5482, 35437, 2396, 5294, 19030, 6740, 56618, 6826, // 2180 - 2189
	2900, 46442, 5338, 2396, 29867, 5274, 64075, 5714, 5802, 51925, // 2190 - 2199
	1460, 4794, 35163, 2358, 78999, 3222, 3410, 54953, 3434, 1388, // 2200 - 2209
	37558, 4718, 2350, 27798, 7316, 64842, 6994, 2922, 42349, 1372, // 2210 - 2219
	4700, 39213, 6442, 80533, 5780, 5842, 60122, 2742, 1210, 45659, // 2220 - 2229
	4694, 5418, 31381, 5780, 71338, 5546, 2742, 42167, 1198, 2646, // 2230 - 2239
	38187, 3370, 93589, 2900, 5482, 51565, 2396, 5294, 43597, 6732, // 2240 - 2249
	7466, 27989, 2900, 62810, 4794, 2396, 54427, 5274, 6730, 47909, // 2250 - 2259
	5800, 6868, 9652, 4790, 59735, 2358, 5270, 46667, 3402, 5544, // 2260 - 2269
	30389, 1388, 70326, 4718, 2350, 52374, 7316, 7498, 36265, 2906, // 2270 - 2279
	1388, 21166, 4700, 55597, 6442, 6804, 47946, 5834, 2772, 30043, // 2280 - 2289
	1210, 62043, 4694, 5418, 54933, 3732, 5802, 35541, 2484, 5302, // 2290 - 2299

}
var ALL_DAYS_LIST = [500][13]int{} // 这里得到一个总数

func init() {
	// 目前精度只能 30年到2300年
	// 需要在这里计算出每一年每一月的距离原点的天数
	// 公元1800年1月25日是第  657098 天(农历是1月1日)
	var nTotalDays int = 657097
	for nYear := START_YEAR; nYear < START_YEAR+500; nYear++ {
		for nMonth := 1; nMonth <= 13; nMonth++ {
			// 就要把天数写到对应的内容里去
			ALL_DAYS_LIST[nYear-START_YEAR][nMonth-1] = nTotalDays
			// 天数叠加
			nTotalDays += GetMonthDays(nYear, nMonth)
		}
	}
}

// 返回农历日期是否合法
func GetDateIsValid(nYear, nMonth, nDay int) bool {
	// 没有公元0年
	if nYear == 0 {
		return false
	}

	// 1月开始, 13月结束
	if nMonth < 1 || nMonth > 13 {
		return false
	}

	// 1号开始
	if nDay < 1 {
		return false
	}

	if nLeapMonth := GetLeapMonth(nYear); nLeapMonth == 0 {
		// 没有闰月的话 nMonth 只能是 1 ~ 12
		if nMonth == 13 {
			return false
		}
	}

	// 获取每个月有多少天, 超过天数的话 日期非法
	if nDay > GetMonthDays(nYear, nMonth) {
		return false
	}

	return true
}

// 获得某农历年的闰月，返回 1~12 对应一月到十二月，返回 0 表示无闰月
func GetLeapMonth(nYear int) int {
	if nYear < START_YEAR || nYear >= START_YEAR+500 {
		return 0
	}
	var nLeapMonth = LEAP_MONTH_LIST[nYear-START_YEAR]
	nLeapMonth >>= 13 // 移除掉12个农历大小月
	nLeapMonth = nLeapMonth & 15
	return nLeapMonth
}

// 获取某农历年的第N个月是大月30天还是小月29天(这里的nMonth是第几个月的意思, 假如某年是闰5月, 那么七月初二就是 8月2)
func GetMonthDays(nYear, nMonth int) int {
	if nYear < START_YEAR || nYear >= 2300 {
		return 0
	}

	if nMonth < 1 || nMonth > 13 {
		return 0
	}

	// 如果有闰月, 并且闰月
	var nLeapMonth = GetLeapMonth(nYear)
	if nLeapMonth == 0 && nMonth == 13 {
		return 0
	}

	var nBig = LEAP_MONTH_LIST[nYear-START_YEAR]
	nBig = nBig >> uint8(13-nMonth)
	// 取第一位
	nBig = nBig & 1

	// 如果有值(nBig == 1)那么是大月
	if nBig > 0 {
		return 30
	} else {
		return 29
	}
}

// 获取距离公元原点的日数, 这里是农历来的年月日
func GetAllDays(nYear, nMonth, nDay int) int {
	// 目前只能计算1800年到2300年的天数, 精度不够高
	if nYear < START_YEAR || nYear >= 2300 {
		return 0
	}

	if nMonth < 1 || nMonth > 13 {
		return 0
	}

	return ALL_DAYS_LIST[nYear-START_YEAR][nMonth-1] + nDay
}

// 传统人口述的农历月, 改成算法的农历第几个月
func ChangeLeap(nYear, nMonth int, isLeap bool) (int, int) {
	nLeapMonth := GetLeapMonth(nYear)

	// 没有闰月, 直接返回月份
	if nLeapMonth == 0 {
		return nYear, nMonth
	}

	// 有闰月
	// 闰月之前不变
	if nMonth < nLeapMonth {
		return nYear, nMonth
	}

	// 闰月时
	if nMonth == nLeapMonth {
		if isLeap {
			return nYear, nMonth + 1 // 闰月是下一个月
		} else {
			return nYear, nMonth
		}
	}

	// 超过闰月直接下一个
	return nYear, nMonth + 1
}

func PrintLunar(dt TDate) string {
	nLeapMonth := GetLeapMonth(dt.Year)
	// 闰月正常
	if nLeapMonth == 0 {
		return "农历" + GetLunarMonthFromNumber(dt.Month) + GetLunarDayFromNumber(dt.Day)
	}

	// 闰月年, 但是没到闰月
	if nLeapMonth >= dt.Month {
		return "农历" + GetLunarMonthFromNumber(dt.Month) + GetLunarDayFromNumber(dt.Day)
	}

	// 刚好闰月,
	if nLeapMonth == dt.Month-1 {
		return "农历闰" + GetLunarMonthFromNumber(dt.Month-1) + GetLunarDayFromNumber(dt.Day)
	}

	// 超过闰月
	return "农历" + GetLunarMonthFromNumber(dt.Month-1) + GetLunarDayFromNumber(dt.Day)
}
